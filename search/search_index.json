{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DQ ETL","text":"<p>DQ ETL is a plugin-based Extract, Transform, Load (ETL) framework designed to provide flexible and configurable data migration between different sources and destinations.</p>"},{"location":"#key-features","title":"Key Features:","text":""},{"location":"#plugin-based-architecture","title":"Plugin-Based Architecture","text":"<p>Easily extend functionality by adding new source and destination plugins.</p>"},{"location":"#dynamic-batching","title":"Dynamic Batching","text":"<p>The framework automatically manages batch sizes, handling failures and adjusting throughput for optimal performance.</p>"},{"location":"#automatic-retries","title":"Automatic Retries","text":"<p>Built-in mechanisms to retry failed operations, ensuring data integrity and reliability.</p>"},{"location":"#progress-tracking","title":"Progress Tracking","text":"<p>The framework offers progress bars to monitor the ongoing ETL process.</p>"},{"location":"db_intros/","title":"Introduction to DBs","text":""},{"location":"db_intros/#introductory-lessons-on-postgresql","title":"Introductory Lessons on PostgreSQL","text":""},{"location":"db_intros/#1-postgresql-basics","title":"1. PostgreSQL Basics","text":"<p>Logging Into PostgreSQL:</p> <p>Once you're in the PostgreSQL environment:</p> <pre><code>psql -U postgres\n</code></pre> <p>Here, <code>-U postgres</code> specifies that you want to log in with the user \"postgres\".</p> <p>List All Databases:</p> <p>Once logged in, you can list all databases:</p> <pre><code>\\l\n</code></pre> <p>or </p> <pre><code>\\list\n</code></pre> <p>Switching Databases:</p> <p>To switch to a specific database:</p> <pre><code>\\c your_database_name\n</code></pre> <p>Listing Tables:</p> <p>To see a list of all tables in the current database:</p> <pre><code>\\dt\n</code></pre>"},{"location":"db_intros/#2-basic-sql-commands-in-postgresql","title":"2. Basic SQL Commands in PostgreSQL","text":"<p>Creating a Table:</p> <p>Here's a basic command to create a new table:</p> <pre><code>CREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    birth_date DATE\n);\n</code></pre> <p>In this example, <code>id</code> is an auto-incrementing primary key, and <code>first_name</code>, <code>last_name</code>, and <code>birth_date</code> are columns in the <code>employees</code> table.</p> <p>Inserting Data:</p> <p>You can insert data into the table like this:</p> <pre><code>INSERT INTO employees (first_name, last_name, birth_date) VALUES ('John', 'Doe', '1980-01-15');\n</code></pre> <p>Querying Data:</p> <p>To retrieve data from the table:</p> <pre><code>SELECT * FROM employees;\n</code></pre> <p>This command fetches all records from the <code>employees</code> table.</p> <p>Updating Data:</p> <p>To modify existing data:</p> <pre><code>UPDATE employees SET first_name = 'Jane' WHERE id = 1;\n</code></pre> <p>This command changes the <code>first_name</code> of the employee with <code>id = 1</code> to 'Jane'.</p> <p>Deleting Data:</p> <p>To remove data:</p> <pre><code>DELETE FROM employees WHERE id = 1;\n</code></pre> <p>This deletes the employee record with <code>id = 1</code>.</p>"},{"location":"db_intros/#3-miscellaneous-commands","title":"3. Miscellaneous Commands","text":"<p>Exiting PostgreSQL:</p> <p>To exit the PostgreSQL command line:</p> <pre><code>\\q\n</code></pre> <p>Viewing Table Structure:</p> <p>To see the structure of a specific table:</p> <pre><code>\\d your_table_name\n</code></pre> <p>These are just a few basics to get you started with PostgreSQL. As you dive deeper, you'll come across more advanced features and functionalities that PostgreSQL offers. Remember, the official PostgreSQL documentation is a comprehensive resource for any in-depth exploration or issues you might encounter.</p>"},{"location":"db_intros/#introduction-to-mysql","title":"Introduction to MySQL","text":"<p>MySQL is one of the world's most popular open-source relational database management systems (RDBMS). Owned by Oracle Corporation, it's renowned for its fast performance, reliability, and ease of use. MySQL uses Structured Query Language (SQL) for database access, which is the standard language for interacting with databases.</p>"},{"location":"db_intros/#1-mysql-basics","title":"1. MySQL Basics","text":"<p>Logging Into MySQL:</p> <p>Once you've accessed the MySQL environment, you can log in using:</p> <pre><code>mysql -u root -p\n</code></pre> <p>You'll be prompted to enter the password. </p> <p>List All Databases:</p> <p>After logging in, you can view all the databases:</p> <pre><code>SHOW DATABASES;\n</code></pre> <p>Switching Databases:</p> <p>To switch to a specific database:</p> <pre><code>USE your_database_name;\n</code></pre> <p>Listing Tables:</p> <p>To see all the tables within the selected database:</p> <pre><code>SHOW TABLES;\n</code></pre>"},{"location":"db_intros/#2-basic-sql-commands-in-mysql","title":"2. Basic SQL Commands in MySQL","text":"<p>Creating a Table:</p> <p>To create a new table:</p> <pre><code>CREATE TABLE employees (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    birth_date DATE\n);\n</code></pre> <p>Here, <code>id</code> is an auto-incrementing primary key. <code>first_name</code>, <code>last_name</code>, and <code>birth_date</code> are columns in the <code>employees</code> table.</p> <p>Inserting Data:</p> <p>To add data into the table:</p> <pre><code>INSERT INTO employees (first_name, last_name, birth_date) VALUES ('John', 'Doe', '1980-01-15');\n</code></pre> <p>Querying Data:</p> <p>To fetch data from the table:</p> <pre><code>SELECT * FROM employees;\n</code></pre> <p>This retrieves all records from the <code>employees</code> table.</p> <p>Updating Data:</p> <p>For modifying existing data:</p> <pre><code>UPDATE employees SET first_name = 'Jane' WHERE id = 1;\n</code></pre> <p>This updates the <code>first_name</code> of the record with <code>id = 1</code> to 'Jane'.</p> <p>Deleting Data:</p> <p>To delete data:</p> <pre><code>DELETE FROM employees WHERE id = 1;\n</code></pre> <p>This removes the record with <code>id = 1</code>.</p>"},{"location":"db_intros/#3-miscellaneous-commands_1","title":"3. Miscellaneous Commands","text":"<p>Viewing Table Structure:</p> <p>To see the structure of a particular table:</p> <pre><code>DESCRIBE your_table_name;\n</code></pre> <p>Exiting MySQL:</p> <p>To exit the MySQL interface:</p> <pre><code>EXIT;\n</code></pre> <p>or simply</p> <pre><code>QUIT;\n</code></pre> <p>These are just fundamental steps and commands to get started with MySQL. As you dive deeper, you'll discover the rich feature set MySQL offers. The official MySQL documentation is an invaluable resource for any further exploration or challenges you might encounter.</p>"},{"location":"docker_db_setup/","title":"DB setup","text":""},{"location":"docker_db_setup/#setting-up-dbms-in-docker-for-testing","title":"Setting Up DBMS in Docker for Testing","text":"<p>When developing and testing applications, especially ones like ETL frameworks, it's essential to have a consistent and easily reproducible environment. Docker offers an ideal solution by enabling developers to set up database management systems (DBMS) swiftly and without the hassles of manual configurations or system-specific issues.</p> <p>Using Docker containers, developers can spin up instances of various DBMS with just a few commands. This ensures that the testing of the ETL framework is conducted in a controlled environment, closely mimicking a real-world scenario but tailored for development and testing rather than deployment.</p> <p>This guide will walk you through setting up popular DBMS in Docker containers. The primary aim is to assist developers in quickly establishing their testing environments, allowing them to focus on the core ETL logic and ensuring the reliability and efficiency of data transformations.</p> <p>Certainly! Here's a consolidated guide for setting up and populating a PostgreSQL instance using Docker, based on your provided configuration and requirements:</p>"},{"location":"docker_db_setup/#setting-up-postgresql-in-docker-for-etl-framework-testing","title":"Setting Up PostgreSQL in Docker for ETL Framework Testing","text":"<p>For testing our ETL framework, we'll set up a PostgreSQL instance with the following configuration:</p> <ul> <li>Host: localhost</li> <li>Port: 5432</li> <li>User: postgres</li> <li>Password: mysecretpassword</li> <li>Database Name: postgres</li> </ul>"},{"location":"docker_db_setup/#1-pull-the-postgresql-docker-image","title":"1. Pull the PostgreSQL Docker Image:","text":"<p>Retrieve the PostgreSQL image from Docker Hub:</p> <pre><code>docker pull postgres\n</code></pre>"},{"location":"docker_db_setup/#2-create-and-start-a-postgresql-container","title":"2. Create and Start a PostgreSQL Container:","text":"<p>Initiate a Docker container with our specific configuration:</p> <pre><code>docker run --name postgres-etl-test -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres\n</code></pre> <ul> <li><code>--name postgres-etl-test</code> gives the container a name.</li> <li><code>-e POSTGRES_PASSWORD=mysecretpassword</code> sets the PostgreSQL instance password.</li> <li><code>-p 5432:5432</code> exposes port 5432 on both host and container.</li> </ul>"},{"location":"docker_db_setup/#3-attach-to-the-containers-bash-shell","title":"3. Attach to the Container's Bash Shell:","text":"<p>Get direct interaction with the PostgreSQL instance:</p> <pre><code>docker exec -it postgres-etl-test bash\n</code></pre> <p>You'll now be inside a bash shell for the <code>postgres-etl-test</code> container.</p>"},{"location":"docker_db_setup/#4-setup-pgbench-and-populate-the-database","title":"4. Setup <code>pgbench</code> and Populate the Database:","text":"<p>Switch to the PostgreSQL user:</p> <pre><code>su - postgres\n</code></pre> <p>Create a database:</p> <pre><code>createdb postgres\n</code></pre> <p>Initialize the database with <code>pgbench</code> (creating necessary tables):</p> <pre><code>pgbench -i postgres\n</code></pre> <p>To populate the primary table with 1 crore (10 million) rows:</p> <pre><code>pgbench -i -s 100 postgres\n</code></pre> <p>This command might take a while as it's generating and inserting a large amount of data.</p>"},{"location":"docker_db_setup/#setting-up-mysql-in-docker-for-etl-framework-testing","title":"Setting Up MySQL in Docker for ETL Framework Testing","text":"<p>For our ETL testing environment, we will configure a MySQL instance with the following parameters:</p> <ul> <li>Host: localhost</li> <li>Port: 3306</li> <li>User: root</li> <li>Password: my-secret-pw</li> <li>Database Name: your_db_name</li> </ul> <p>Here are the steps to achieve this:</p>"},{"location":"docker_db_setup/#1-pull-the-mysql-docker-image","title":"1. Pull the MySQL Docker Image:","text":"<p>If you haven't already, fetch the MySQL image from Docker Hub:</p> <pre><code>docker pull mysql\n</code></pre>"},{"location":"docker_db_setup/#2-create-and-start-a-mysql-container","title":"2. Create and Start a MySQL Container:","text":"<p>Using the pulled image, launch a Docker container with the specified configuration:</p> <pre><code>docker run --name mysql-etl-test -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 -d mysql\n</code></pre> <p>Here: - <code>--name mysql-etl-test</code> gives a specific name to your container. - <code>-e MYSQL_ROOT_PASSWORD=my-secret-pw</code> sets the password for the MySQL root account. - <code>-p 3306:3306</code> exposes port 3306 on both the container and the host machine.</p>"},{"location":"docker_db_setup/#3-connect-to-the-mysql-instance","title":"3. Connect to the MySQL Instance:","text":"<p>To access the MySQL instance within the container:</p> <pre><code>docker exec -it mysql-etl-test mysql -uroot -p\n</code></pre> <p>You'll be prompted for the password. Enter <code>my-secret-pw</code> (or whatever password you've set).</p>"},{"location":"docker_db_setup/#4-create-the-database","title":"4. Create the Database:","text":"<p>Once you're inside the MySQL prompt, create your desired database:</p> <pre><code>CREATE DATABASE your_db_name;\n</code></pre> <p>To switch to the database you've just created:</p> <pre><code>USE your_db_name;\n</code></pre> <p>Now, you're working within the <code>your_db_name</code> database and can start creating tables, inserting data, and running queries as required.</p> <p>With these instructions, you'll have a MySQL instance within a Docker container, set up according to the specified configuration, ready for ETL testing. This environment allows developers to work in a consistent database setting regardless of their local machine configurations.</p>"},{"location":"how_to_use/","title":"How to Use","text":"<p>How to Use:</p> <p>Configuration:</p> <p>To get started, prepare a single JSON configuration file. This file should encompass both the source and destination configurations, as well as specify the type and version of the operation you wish to carry out.</p> <p>Your configuration file should resemble the following:</p> <pre><code>{\n    \"operation\": {\n        \"type\": \"migration\",\n        \"version\": \"1\"\n    },\n    \"source\": {\n        \"plugin_name\": \"PostgresPlugin\",\n        \"host\": \"localhost\",\n        \"port\": 5432,\n        \"user\": \"postgres\",\n        \"password\": \"mysecretpassword\",\n        \"dbname\": \"postgres\",\n        \"table_name\": \"pgbench_accounts\"\n    },\n    \"destination\": {\n        \"plugin_name\": \"MySQLPlugin\",\n        \"host\": \"localhost\",\n        \"port\": 3306,\n        \"user\": \"root\",\n        \"password\": \"my-secret-pw\",\n        \"dbname\": \"your_db_name\",\n        \"table_name\": \"destination_table_name\"\n    }\n}\n</code></pre> <p>In the \"operation\" section:</p> <ul> <li>type: This defines the kind of operation to be executed. The values can be \"migration\", \"etl\", or any other custom types you may introduce later on.</li> <li>version: This represents the version number of the operation.</li> </ul> <p>Running the ETL Process:</p> <ol> <li>Before you start, ensure that all plugins mentioned in the configuration are present and are compatible versions.</li> <li>With your configuration ready, initiate the ETL process via the main entry point, <code>main.py</code>:</li> </ol> <pre><code>$ python main.py path_to_your_configuration_file.json\n</code></pre> <p>Make sure to replace <code>path_to_your_configuration_file.json</code> with the precise path to your JSON configuration file.</p> <p>Executing this command initializes the ETL process. It uses the stated plugins to extract data from the designated source, possibly undergoes a transformation, and eventually loads it to the target destination.</p>"},{"location":"project_structure/","title":"Project Structure","text":"<p>DQ-etl Project Structure</p> <ul> <li>Root Directory (DQ-etl): This is the main directory of your project.</li> <li>config_parser.py: Responsible for parsing and handling configuration files required for the ETL process.</li> <li>controller.py: Contains the <code>ETLController</code> class. This class oversees the extraction from the source, any needed transformations, and the loading into the destination, ensuring smooth error recovery, dynamic batching, and performance enhancements.</li> <li>main.py: The primary entry point for the ETL process. Manages configuration loading, plugin initiation, and the triggering of ETL operations.</li> <li> <p>plugin_registry.py: Handles the registration and management of available plugins.</p> </li> <li> <p>plugins: This directory encompasses all the plugins that can be used within the ETL framework.</p> </li> <li>databases: Houses plugins related to database operations.<ul> <li>clickhouse_plugin: Contains files pertinent to the Clickhouse database operations.</li> <li>plugin.py: Main logic for Clickhouse ETL operations.</li> <li>test.py: Tests related to the Clickhouse plugin.</li> <li>type_mapping.py: Maps data types for Clickhouse operations.</li> <li>mysql_plugin: Files related to MySQL database operations.</li> <li>main.py: Main entry point for the MySQL plugin.</li> <li>plugin.py: Contains logic for MySQL ETL operations.</li> <li>type_mapping.py: Manages data type mapping for MySQL operations.</li> <li>postgres_plugin: Contains files for PostgreSQL operations.</li> <li>main.py: Main entry point for the PostgreSQL plugin.</li> <li>plugin.py: Contains logic for PostgreSQL ETL operations.</li> <li>type_mapping.py: Manages data type mapping for PostgreSQL operations.</li> </ul> </li> <li> <p>messaging_systems: Handles plugins related to messaging systems.</p> <ul> <li>apache_pulsar: Plugin for operations related to Apache Pulsar.</li> <li>main.py: Main entry point for the Apache Pulsar plugin.</li> <li>plugin.py: Contains logic for Apache Pulsar operations.</li> <li>interface.py: Defines the standard interface for messaging systems plugins.</li> </ul> </li> <li> <p>utility: Contains utility functions and classes that assist other modules.</p> </li> <li> <p>utils.py: Offers utility functions and classes.</p> </li> <li> <p>README.md: Documentation or introductory content about the <code>DQ-etl</code> project.</p> </li> <li>pyproject.toml and poetry.lock: Files related to Poetry for dependency management.</li> <li>setup.py: Provides setup instructions for the project.</li> </ul> <p>This directory structure offers a clear separation of functionalities, making the project modular and scalable. Users or developers can easily navigate through the project, understand its components, and even extend it with new plugins or utilities.</p>"},{"location":"setup_installation/","title":"Setup & Installation","text":"<p>Setup &amp; Installation</p> <p>To set up and start using the DQ ETL, follow these steps:</p> <p>1. Clone the Repository:</p> <p>Run the following command:</p> <pre><code>git clone [repository_url]\n</code></pre> <p>2. Python Installation:</p> <p>Ensure you have Python version 3.10 or above installed.</p> <p>3. Install Poetry:</p> <p>This project uses Poetry for dependency management. To install it, run:</p> <pre><code>pip install poetry \n</code></pre> <p>4. Install Dependencies:</p> <p>After navigating to the project directory, run:</p> <pre><code>poetry install\n</code></pre> <p>5. Activate Virtual Environment:</p> <p>To enter the project's virtual environment, use:</p> <pre><code>poetry shell\n</code></pre>"}]}